@model EmployeeManagementSystem.Models.Employee

@{
    ViewBag.Title = "Add New Employee Details";
}

<h2 class="d-flex justify-content-center align-items-center">Add New Employee Details</h2>


@using (Html.BeginForm("Index", "Employee", FormMethod.Post, new { id = "AddEmployeeForm" }))
{
    @Html.AntiForgeryToken()

<div class="form-horizontal">
    <h4>Employee</h4>

    @*<div class="form-group">
            <div class="col-md-offset-2 col-md-10 my-4">
                <a href="@Url.Action("EmployeeDetails", "Employee")" class="btn btn-outline-info col-md-2 mr-4">View All Employees</a>
            </div>
        </div>*@
   
    <div class="form-group">
        <div class="col-md-offset-2 col-md-10 my-4">
            @Html.ActionLink("View All Employees", "EmployeeDetails", "Employee", null, new { @class = "btn btn-outline-info col-md-2 mr-4" })
        </div>
    </div>
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    <div class="form-group d-flex flex-row mb-2">
        @Html.LabelFor(model => model.Name, "Employee Name: ", htmlAttributes: new { @class = "control-label col-md-2 fs-6 fw-bold" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control", placeholder = "Enter Your Name", required = "required" } })
            @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group d-flex flex-row mb-2">
        @Html.LabelFor(model => model.EmployeeCode, "Employee Code: ", htmlAttributes: new { @class = "control-label col-md-2 fs-6 fw-bold" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.EmployeeCode, new { htmlAttributes = new { @class = "form-control", Type = "Number", placeholder = "Enter Employee Code", required = "required", id = "employeeCode" } })
            @Html.ValidationMessageFor(model => model.EmployeeCode, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group d-flex flex-row mb-2">
        @Html.LabelFor(model => model.EmailId, "Email Id: ", htmlAttributes: new { @class = "control-label col-md-2 fs-6 fw-bold" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.EmailId, new { htmlAttributes = new { @class = "form-control", placeholder = "Enter Email-ID", required = "required" } })
            @Html.ValidationMessageFor(model => model.EmailId, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group d-flex flex-row mb-2">
        @Html.LabelFor(model => model.PhoneNo, "Phone Number: ", htmlAttributes: new { @class = "control-label col-md-2 fs-6 fw-bold" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.PhoneNo, new { htmlAttributes = new { @class = "form-control", Type = "Number", placeholder = "Enter Phone Number", required = "required", id = "phoneNo" } })
            @Html.ValidationMessageFor(model => model.PhoneNo, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group d-flex flex-row mb-2">
        @Html.LabelFor(model => model.Gender, "Gender: ", htmlAttributes: new { @class = "control-label col-md-2 fw-normal fs-6 fw-bold" })
        <div class="col-md-10">
            @Html.DropDownList("Gender", new List<SelectListItem>
                     {
                         new SelectListItem{Text = "Male", Value = "Male"},
                         new SelectListItem{Text = "Female", Value="Female"}
                     },
                     "Select Gender", new { @class = "from-control border border-1 border-dark gender-box", required = "required" }
                     )
            @Html.ValidationMessageFor(model => model.Gender, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10 my-4">
            <button type="button" id="submitBtn" class="btn btn-primary col-md-2 mr-4">Create</button>
            <button type="button" id="resetBtn" class="btn btn-danger col-md-2 mx-5">Reset</button>
        </div>
    </div>
</div>

}
@*<div> @Html.ActionLink("Back to List", "Index") </div>*@

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        $(document).ready(function () {
            function resetForm() {
                $('#AddEmployeeForm')[0].reset();
            }
            $('#submitBtn').click(function () {
                var isValid = true;
                $('input[required]').each(function () {
                    if ($.trim($(this).val()) == '') {
                        isValid = false;
                        return false; 
                    }
                });

                // Display message if any required field is empty
                if (!isValid) {
                    alert("Please enter all details.");
                    return;
                }
                // Perform form submission via AJAX
                $.ajax({
                    url: '@Url.Action("Index", "Employee")',
                    type: 'POST',
                    data: $('form').serialize(),
                    success: function (response) {
                        alert(response.message);
                        
                        //console.log(response);
                        $('#AddEmployeeForm')[0].reset();
                    }
                });
            });
            $('#resetBtn').click(function () {
                resetForm();
            });
            
            $('#phoneNo').on('input', function () {
                var maxLength = 10;
                var sanitizedValue = $(this).val().replace(/\D/g, ''); 
                if (sanitizedValue.length > maxLength) {
                    sanitizedValue = sanitizedValue.slice(0, maxLength);
                }
                $(this).val(sanitizedValue);
            });
            $('#employeeCode').on('input', function () {
                var maxLength = 6;
                var sanitizedValue = $(this).val().replace(/\D/g, ''); 
                if (sanitizedValue.length > maxLength) {
                    sanitizedValue = sanitizedValue.slice(0, maxLength);
                }
                $(this).val(sanitizedValue);
            });
        });

    </script>
}
